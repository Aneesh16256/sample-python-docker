name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: myapp-image
  SSH_KEY_PATH: ~/.ssh/id_rsa

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Optional Docker Hub login (only if credentials are provided)
    - name: Login to Docker Hub
      if: secrets.DOCKER_HUB_USERNAME && secrets.DOCKER_HUB_TOKEN
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    # Simplified Docker setup (removed problematic Buildx)
    - name: Set up Docker
      run: |
        docker version
        docker info

    - name: Build Docker Image
      run: |
        docker build -t $IMAGE_NAME:${{ github.sha }} .
        docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest

    - name: Save Docker Image
      run: docker save -o $IMAGE_NAME.tar $IMAGE_NAME:latest

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > $SSH_KEY_PATH
        chmod 600 $SSH_KEY_PATH
        ssh-keyscan -H ${{ secrets.GCP_HOST }} >> ~/.ssh/known_hosts

    - name: Copy Image to VM
      run: |
        scp -o StrictHostKeyChecking=no $IMAGE_NAME.tar ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }}:/tmp/

    - name: Deploy to VM
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_USER }}@${{ secrets.GCP_HOST }} << 'EOF'
          docker load -i /tmp/$IMAGE_NAME.tar
          docker stop myapp || true
          docker rm myapp || true
          docker run -d --name myapp -p 80:80 --restart unless-stopped $IMAGE_NAME:latest
          rm /tmp/$IMAGE_NAME.tar
        EOF

    - name: Clean up local image
      run: |
        rm $IMAGE_NAME.tar
      if: always()  # Clean up even if previous steps fail
